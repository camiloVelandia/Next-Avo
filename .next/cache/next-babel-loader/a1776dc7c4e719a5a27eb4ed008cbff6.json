{"ast":null,"code":"// Oh you curious...\n// This is not a real database,\n// But let's imagine it is one :)\nimport allData from \"./data\";\n\nclass Database {\n  constructor() {}\n\n  async getAll() {\n    const asArray = Object.values(allData);\n    await randomDelay();\n    console.log('ad');\n    return asArray;\n  }\n\n  async getById(id) {\n    if (!Object.prototype.hasOwnProperty.call(allData, id)) {\n      return null;\n    }\n\n    const entry = allData[id];\n    await randomDelay();\n    return entry;\n  }\n\n} // Let's also add a delay to make it a bit closer to reality\n\n\nconst randomDelay = () => new Promise(resolve => {\n  const max = 350;\n  const min = 100;\n  const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n  setTimeout(resolve, delay);\n});\n\nexport default Database;","map":{"version":3,"sources":["/mnt/c/Users/cmax9/documents/Developer/nextJs/database/db.js"],"names":["allData","Database","constructor","getAll","asArray","Object","values","randomDelay","console","log","getById","id","prototype","hasOwnProperty","call","entry","Promise","resolve","max","min","delay","Math","floor","random","setTimeout"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,OAAP,MAAoB,QAApB;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG,CAAE;;AAEhB,QAAMC,MAAN,GAAe;AACb,UAAMC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAcN,OAAd,CAAhB;AACA,UAAMO,WAAW,EAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACA,WAAOL,OAAP;AACD;;AAED,QAAMM,OAAN,CAAcC,EAAd,EAAkB;AAChB,QAAI,CAACN,MAAM,CAACO,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCd,OAArC,EAA8CW,EAA9C,CAAL,EAAwD;AACtD,aAAO,IAAP;AACD;;AAED,UAAMI,KAAK,GAAGf,OAAO,CAACW,EAAD,CAArB;AACA,UAAMJ,WAAW,EAAjB;AACA,WAAOQ,KAAP;AACD;;AAlBY,C,CAqBf;;;AACA,MAAMR,WAAW,GAAG,MAClB,IAAIS,OAAJ,CAAaC,OAAD,IAAa;AACvB,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,GAAG,GAAG,GAAZ;AACA,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,GAAG,GAAGC,GAAN,GAAY,CAA7B,CAAX,IAA8CA,GAA5D;AAEAK,EAAAA,UAAU,CAACP,OAAD,EAAUG,KAAV,CAAV;AACD,CAND,CADF;;AASA,eAAenB,QAAf","sourcesContent":["// Oh you curious...\n// This is not a real database,\n// But let's imagine it is one :)\nimport allData from \"./data\";\n\nclass Database {\n  constructor() {}\n\n  async getAll() {\n    const asArray = Object.values(allData);\n    await randomDelay();\n    console.log('ad')\n    return asArray;\n  }\n\n  async getById(id) {\n    if (!Object.prototype.hasOwnProperty.call(allData, id)) {\n      return null;\n    }\n\n    const entry = allData[id];\n    await randomDelay();\n    return entry;\n  }\n}\n\n// Let's also add a delay to make it a bit closer to reality\nconst randomDelay = () =>\n  new Promise((resolve) => {\n    const max = 350;\n    const min = 100;\n    const delay = Math.floor(Math.random() * (max - min + 1)) + min;\n\n    setTimeout(resolve, delay);\n  });\n\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}